
module chat.ChatView where

import fregefx.JavaFxType
import fregefx.JavaFxAll hiding (ListView)
import fregefx.JavaFxUtils

import Data.JSON
import Control.Concurrent

import chat.Remote (doPost)
import chat.Data (Post)

totalWidth   = 600.0
totalHeight  = 500.0

type InputRef = JFXRef (TextField, TextArea) 

main args = do        
    FregeFX.launch $ withStage buildUI 
    
getPostings âˆ· IO (Maybe String)
getPostings = doPost "http://localhost:8080/json/list" ""

buildUI :: Group -> Stage -> JFX Group
buildUI root stage = do
    stage.setTitle "Frege Chat"
    stage.setWidth  totalWidth
    stage.setHeight totalHeight
    
    senderField <- TextField.new "Dierk"                    :: JFX TextField
    messageArea <- TextArea.new  "My message: Frege rocks!" :: JFX TextArea
    chatArea    <- TextArea.new  "empty"                    :: JFX TextArea
    
    inputRef <- JFXRef.new (senderField, messageArea)
    
    pane <- Pane.new () :: JFX Pane
    root <: do
        pane `addNode` do
            r <- Rectangle.new 0.0 0.0 totalWidth totalHeight
            r.setStyle "-fx-fill:radial-gradient(center 25% 25%, radius 60%, reflect, orange, red );"
            return r
        pane <: do
            vbox <- VBox.new 5d :: JFX VBox
            vbox.setPadding =<< insets 25
            vbox <: return senderField
            vbox <: return messageArea
            vbox  <: do
            	hbox <- HBox.new 5d :: JFX HBox            	
	            hbox <: do
                    sendButton <- Button.new "Send"     
                    actionIO_ sendButton (submitPost inputRef)
	            hbox <: do
	                refreshButton <- Button.new "Refresh"     
	                bridgeAction refreshButton getPostings (onChatLoaded chatArea)
            vbox <: return chatArea
    scene <- stage.getScene
    -- getPostings `thenDo` (onChatLoaded chatArea) -- in case we want to pre-load.
    return root

submitPost :: InputRef -> IO ()
submitPost inputRef = 
    inIO (makePost inputRef) $ \payload -> do
        doPost "http://localhost:8080/json/create" payload 
        return ()

makePost :: InputRef -> JFX String
makePost inputRef = do
    (sender, message) <- inputRef.get
    senderText  <- sender.getText
    messageText <- message.getText
    return $ show Post {sender = senderText, message = messageText}.toJSON

onChatLoaded :: TextArea -> (Maybe String) -> JFX ()
onChatLoaded chatArea result = do
    case (result >>= parseJSON) of
        Nothing                -> return ()
        Just (posts :: [Post]) -> do
            output = unlines $ map (\post -> post.sender ++ ":\n    " ++ post.message ++ "\n") posts	
            chatArea.setText output
    

