module chinook.Handlers where

import Data.JSON

import chinook.Data (Lang)
import chinook.util.ContentType
import chinook.Core (Request, Response, response)

getJSONHandler :: IO Request -> IO Response
getJSONHandler req = do
  code  <- req.param "code"
  desc  <- req.param "desc"
  return $ response.{ status  = 200,
                      output  = getLangAsJSON code desc,
                      headers = [("Content-Type", Just "application/json")] }

getLangAsJSON :: Maybe String -> Maybe String -> Maybe String
getLangAsJSON pCode pDesc = do
  code <- pCode
  desc <- pDesc
  return $ (show . toJSON) $ Lang { code = code, desc = desc }

postJSONHandler :: IO Request -> IO Response
postJSONHandler req = do
    body  <- req.body
    return $ case (processJSON body) of
        Just Lang { code, desc } -> createdResponse
        Nothing                  -> badRequest

createdResponse :: Response
createdResponse = response.{ status  = 201 ,
                             output  = Just "Created",
                             headers = [ContentType.json] }

badRequest :: Response
badRequest = response.{ status = 400 ,
                        output  = Just "Bad request",
                        headers = [ContentType.json] }


processJSON :: Maybe String -> Maybe Lang
processJSON body = do
  text  <- body
  json  <- parseJSON text
  case json of
    Lang { code, desc }  -> Just json
    _                    -> Nothing