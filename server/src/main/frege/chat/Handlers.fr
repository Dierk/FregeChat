module chat.Handlers where

import Data.JSON

import chinook.util.ContentType
import chinook.Core (Request, Response, response)

import chat.Data (Lang)

getJSONHandler :: IO Request -> IO Response
getJSONHandler req = do
  code  <- req.param "code"
  desc  <- req.param "desc"
  return $ jsonResponse.{ status = 200, output = getLangAsJSON code desc }

getLangAsJSON :: Maybe String -> Maybe String -> Maybe String
getLangAsJSON pCode pDesc = do
  code <- pCode
  desc <- pDesc
  return $ (show . toJSON . take 10) $ cycle [Lang { code = code, desc = desc }]

postJSONHandler :: IO Request -> IO Response
postJSONHandler req = do
    body  <- req.body
    return $ case (processJSON body) of
        Just Lang { code, desc } -> createdResponse
        Nothing                  -> badRequest


jsonResponse    = response.{ headers = [ContentType.json] }
createdResponse = jsonResponse.{ status = 201, output  = Just "Created"}
badRequest      = jsonResponse.{ status = 400, output  = Just "Bad request" }


processJSON :: Maybe String -> Maybe Lang
processJSON body = do
  text  <- body
  json  <- parseJSON text
  case json of
    Lang { code, desc }  -> Just json
    _                    -> Nothing