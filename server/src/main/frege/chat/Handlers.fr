module chat.Handlers where

import Data.JSON

import Control.Concurrent (MVar)

import chinook.util.ContentType (json)
import chinook.Core (Request, Response, response)

import chat.Data (Post, ChatVar)


newChat :: IO ChatVar
newChat = MVar.new []


getJSONHandler :: ChatVar -> IO Request -> IO Response
getJSONHandler chatVar _ = do
  chat <- chatVar.take
  chatVar.put chat
  output = show chat.toJSON
  return jsonResponse.{ status = 200, output = Just output}


postJSONHandler :: ChatVar -> IO Request -> IO Response
postJSONHandler chatVar req = do
    body  <- req.body
    case (body >>= parseJSON) of
        Nothing   -> return badRequest
        Just post -> do
            chat <- chatVar.take
            chatVar.put (post : chat) 
            return createdResponse

jsonResponse    = response.{ headers = [json] }
createdResponse = jsonResponse.{ status = 201, output  = Just "Created"}
badRequest      = jsonResponse.{ status = 400, output  = Just "Bad request" }

